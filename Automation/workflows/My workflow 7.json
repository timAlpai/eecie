{"createdAt":"2025-08-13T14:06:29.223Z","updatedAt":"2025-08-26T12:10:48.254Z","id":"fxdT9CQHKJ211ncC","name":"My workflow 7","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"send-devis-draft","options":{}},"name":"Webhook","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-112,-48],"webhookId":"YOUR_UNIQUE_WEBHOOK_ID","id":"6e5ecc2e-e349-47c4-bd1c-663a0c24a00d"},{"parameters":{"operation":"get","databaseId":52,"tableId":704,"rowId":"={{ $json.body.devis_id }}"},"name":"Get Devis","type":"n8n-nodes-base.baserow","typeVersion":1,"position":[96,-48],"id":"606331ac-5270-41da-9129-1b88f197c36d","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":703,"rowId":"={{ $('Get Devis').item.json.Task_input[0].id }}"},"name":"Get Opportunite","type":"n8n-nodes-base.baserow","typeVersion":1,"position":[288,-48],"id":"12940a36-4081-41ba-bff0-13d296d319f4","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":710,"rowId":"={{ $('Get Opportunite').item.json.Contacts[0].id }}"},"name":"Get Contact","type":"n8n-nodes-base.baserow","typeVersion":1,"position":[496,-48],"id":"45db23dc-8709-434b-988d-d7c784d652c4","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"url":"={{ $('Get Devis').item.json.File[0].url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"name":"Download PDF","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[688,-48],"id":"6be8af6e-e972-4182-9e88-bfa104104ba2"},{"parameters":{"operation":"get","databaseId":52,"tableId":705,"rowId":"={{ $('Get Opportunite').item.json.T1_user[0].id }}"},"name":"Get User Credentials","type":"n8n-nodes-base.baserow","typeVersion":1,"position":[896,-48],"id":"fb31c225-8f6e-47ac-b805-7d90269e91a1","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"jsCode":"const crypto = require('crypto');\nconst SECRET_KEY = $env['GCE_SHARED_SECRET_KEY'];\nconst IV = $env['GCE_SHARED_IV'];\nconst ALGORITHM = 'aes-256-cbc';\nconst item = items[0].json;\nconst encryptedData = item.sec1;\nif (!encryptedData) { item.decrypted_password = null; return [item]; }\ntry {\n  const decipher = crypto.createDecipheriv(ALGORITHM, Buffer.from(SECRET_KEY), Buffer.from(IV));\n  let decrypted = decipher.update(encryptedData, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  item.decrypted_password = decrypted;\n} catch (error) { throw error; }\nreturn [item];"},"name":"Decrypt Password","type":"n8n-nodes-base.code","typeVersion":2,"position":[1088,-48],"id":"a5695098-019a-44a5-b3f7-ce53653b6fd5"},{"parameters":{"promptType":"define","text":"=Crée un email professionnel et amical pour envoyer le devis ci-joint. Le client est {{ $('Get Contact').item.json.Nom }}. Le devis concerne les travaux suivants : {{ $('Get Opportunite').item.json.Travaux }}. La signature est {{ $('Get User Credentials').item.json.Name }}. L'email du client est {{ $('Get Contact').item.json.Email }}. \n\n\nRetourne une structure JSON avec les clés \"sujet\", \"data\", \"email\".\nAucune explication je le corps du mail et le sujet une simple structure json.\n\npas de préfixe python''' ni aucun texte autre que\n\n{\n  \"sujet\": str,\n  \"data\": str,\n  \"email\": str,\n  \n}","messages":{"messageValues":[{"message":"=You are a text-processing expert. Your task is to transform raw JSON data (exported from a CRM like Baserow) into a well-structured Python dictionary that will be used to fill a Jinja2  template.  The goal is to generate a professional email for a client. The final output must be a single Python dict with the following structure:  {   \"sujet\": str,   \"data\": str,   \"email\": str,    } --- TASK ---  Step 1. Carefully analyze the input data. Step 2. Extract the relevant information and format the values correctly. Step 3. Output only the final dictionary, nothing else IMPORTANT no prefixe like python''''''' or code '''''' etc .  Input data (from CRM):  [INSERT RAW JSON HERE] /no_think"}]},"batching":{}},"name":"Generate Email Body","type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[1328,-48],"id":"1e972dec-ba2b-4df4-952a-fac8e6dda69f"},{"parameters":{"model":"qwen/qwen3-32b","options":{}},"name":"Groq Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[1328,176],"id":"beaa9b85-a6b0-4b79-9a2c-25574cbe0463","credentials":{"groqApi":{"id":"HwEaU3wVnHbaSIU9","name":"Groq account"}}},{"parameters":{"jsCode":"const rawResponse = $('Generate Email Body').item.json.text; const cleanedString = rawResponse.replace(/<think>[\\s\\S]*?<\\/think>\\s*/, '');\nconst jsonData = JSON.parse(cleanedString);\nreturn { structuredData: jsonData };"},"name":"Parse LLM Response","type":"n8n-nodes-base.code","typeVersion":2,"position":[1680,-48],"id":"66b53ad2-b93e-44fc-8144-dfc612753863"},{"parameters":{"jsCode":"const nodemailer = require('nodemailer');\nconst imaps = require('imap-simple');\nconst { createMimeMessage } = require('mail-mime-builder');\n\n// --- EMAIL TEMPLATE (Identique à l'original) ---\nconst emailTemplate = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>__SUJET_PLACEHOLDER__</title>\n    <style>\n        body { font-family: 'Helvetica Neue', Arial, sans-serif; font-size: 11pt; color: #333; margin: 0; padding: 0; background-color: #f4f7f6; }\n        .wrapper { width: 100%; background-color: #f4f7f6; padding: 20px; box-sizing: border-box; }\n        .container { max-width: 700px; margin: auto; background-color: #ffffff; border: 1px solid #ddd; border-radius: 5px; overflow: hidden; }\n        .header { padding: 25px 30px; display: flex; justify-content: space-between; align-items: flex-start; background-color: #f8f8f8; border-bottom: 1px solid #eee; }\n        .company-info { line-height: 1.4; font-size: 9pt; color: #555; }\n        .company-name { font-size: 20pt; font-weight: bold; color: #333; margin-bottom: 8px; }\n        .content { padding: 30px; line-height: 1.6; }\n        .content a { color: #2E75B5; font-weight: bold; text-decoration: none; }\n        .content a:hover { text-decoration: underline; }\n        .footer { padding: 20px 30px; text-align: center; font-size: 9pt; color: #888; background-color: #f8f8f8; border-top: 1px solid #eee; }\n        .footer a { color: #2E75B5; text-decoration: none; }\n    </style>\n</head>\n<body>\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"header\">\n                <div>\n                    <div class=\"company-name\">Excellence Executive Cie</div>\n                    <div class=\"company-info\">\n                        1016 Rue Melançon, Saint-Jérôme QC J7J6X7<br>\n                        +1 514 268-4393 | info@ee-cie.ca\n                    </div>\n                </div>\n            </div>\n            <div class=\"content\">\n                __BODY_PLACEHOLDER__\n            </div>\n            <div class=\"footer\">\n                <p>\n                    <a href=\"https://ee-cie.ca\">https://ee-cie.ca</a><br>\n                    NEQ: 742845506RT0001 | TVQ: 4012787052\n                </p>\n                <p>Cet e-mail est un message de service automatisé.</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// --- LOGIQUE PRINCIPALE (Adaptée pour le nouveau workflow) ---\ntry {\n  // Récupération du PDF depuis le noeud 'Download PDF'\n  const attachmentBuffer = await this.helpers.getBinaryDataBuffer(0, 'data');\n  const nomFichier = $input.item.binary['data'].fileName;\n  \n  // Récupération des infos de l'utilisateur depuis les noeuds respectifs\n  const userData = $('Get User Credentials').first().json;\n  const decryptedPassword = $('Decrypt Password').first().json.decrypted_password;\n  \n  // Récupération des données générées par l'IA\n  const llmResponse = $('Parse LLM Response').first().json.structuredData;\n  const destinataire = llmResponse.email;\n  const sujet = llmResponse.sujet;\n  const corpsGenereParLlm = llmResponse.data;\n\n  // Récupération des infos du devis pour le lien\n  const devisData = $('Get Devis').first().json;\n  const devisUrl = devisData.File[0].url;\n  const devisNom = devisData.File[0].visible_name;\n\n  // Construction du corps final de l'email\n  const lienHtmlDevis = `<br><br><p>Le document de référence est disponible en pièce jointe ou via ce lien : <a href=\"${devisUrl}\">${devisNom}</a></p>`;\n  const corpsComplet = corpsGenereParLlm + lienHtmlDevis;\n\n  // Remplacement des placeholders dans le template HTML\n  let finalHtml = emailTemplate.replace('__BODY_PLACEHOLDER__', corpsComplet);\n  finalHtml = finalHtml.replace('__SUJET_PLACEHOLDER__', sujet);\n \n  // Configuration pour l'envoi de l'email\n  const smtpUser = userData.Email;\n  const smtpPass = decryptedPassword;\n  const mailHost = \"eecie.ca\";\n\n  const mailOptions = {\n    from: `\"Excellence Executive Cie\" <${smtpUser}>`,\n    to: destinataire,\n    subject: sujet,\n    html: finalHtml,\n    attachments: [{\n      filename: nomFichier,\n      content: attachmentBuffer,\n      contentType: 'application/pdf',\n    }],\n  };\n  \n  // Dans ce workflow, on envoie toujours l'email. Pas de logique de brouillon.\n  const authConfig = { smtpUser, smtpPass, mailHost };\n  const result = await sendAndSaveEmail(mailOptions, authConfig, 'Sent');\n  \n  return [{ json: result }];\n  \n} catch (error) {\n  console.error(\"Erreur dans le noeud d'envoi d'email:\", error);\n  // Pour un meilleur débogage, on retourne aussi l'erreur dans le workflow\n  if (error.stack) {\n    return [{ json: { error: error.message, stack: error.stack } }];\n  }\n  throw error;\n}\n\n// --- FONCTIONS D'AIDE (Identiques à l'original, aucun changement nécessaire) ---\n\nasync function sendAndSaveEmail(mailOptions, authConfig, sentMailboxName) {\n  const transporter = nodemailer.createTransport({\n    host: authConfig.mailHost, port: 587, secure: false,\n    auth: { user: authConfig.smtpUser, pass: authConfig.smtpPass },\n    tls: { rejectUnauthorized: false }\n  });\n\n  const info = await transporter.sendMail(mailOptions);\n  console.log(`Email envoyé avec succès à ${mailOptions.to}. MessageId: ${info.messageId}`);\n  \n  try {\n    await saveToMailbox(mailOptions, authConfig, sentMailboxName);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} et sauvegardé dans '${sentMailboxName}'`, messageId: info.messageId };\n  } catch (imapError) {\n    console.error(`L'email a été envoyé, mais la sauvegarde dans '${sentMailboxName}' a échoué:`, imapError.message);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} mais échec de la sauvegarde.`, warning: imapError.message, messageId: info.messageId };\n  }\n}\n\nasync function saveToMailbox(mailOptions, authConfig, mailboxName) {\n  const msg = createMimeMessage();\n  msg.setSender(mailOptions.from);\n  msg.setTo(mailOptions.to);\n  msg.setSubject(mailOptions.subject);\n  msg.addMessage({ contentType: 'text/html', data: mailOptions.html });\n  \n  if (mailOptions.attachments && mailOptions.attachments.length > 0) {\n    const attachment = mailOptions.attachments[0];\n    const attachmentBase64 = attachment.content.toString('base64');\n    msg.addAttachment({\n      filename: attachment.filename,\n      contentType: attachment.contentType,\n      data: attachmentBase64,\n      headers: { 'Content-Transfer-Encoding': 'base64' }\n    });\n  }\n  \n  const rawEmail = msg.asRaw();\n  const flags = ['\\\\Seen'];\n\n  const config = {\n    imap: {\n      user: authConfig.smtpUser, password: authConfig.smtpPass,\n      host: authConfig.mailHost, port: 993, tls: true,\n      tlsOptions: { rejectUnauthorized: false }\n    }\n  };\n\n  let connection;\n  try {\n    connection = await imaps.connect(config);\n    await connection.append(rawEmail, { mailbox: mailboxName, flags: flags });\n    connection.end();\n    return { success: true, message: `Email sauvegardé avec succès dans '${mailboxName}'` };\n  } catch (err) {\n    if (connection) connection.end();\n    throw new Error(`Erreur IMAP: Impossible de sauvegarder dans '${mailboxName}'. Détails: ${err.message}`);\n  }\n}"},"name":"Send Email (Code Node)","type":"n8n-nodes-base.code","typeVersion":2,"position":[2224,-48],"id":"9616832a-c93a-4c4b-8935-d598920c207f"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1888,48],"id":"4e2bf1cd-742a-4044-846b-b436ed507c78","name":"Merge"}],"connections":{"Webhook":{"main":[[{"node":"Get Devis","type":"main","index":0}]]},"Get Devis":{"main":[[{"node":"Get Opportunite","type":"main","index":0}]]},"Get Opportunite":{"main":[[{"node":"Get Contact","type":"main","index":0}]]},"Get Contact":{"main":[[{"node":"Download PDF","type":"main","index":0}]]},"Download PDF":{"main":[[{"node":"Get User Credentials","type":"main","index":0},{"node":"Merge","type":"main","index":1}]]},"Get User Credentials":{"main":[[{"node":"Decrypt Password","type":"main","index":0}]]},"Decrypt Password":{"main":[[{"node":"Generate Email Body","type":"main","index":0}]]},"Generate Email Body":{"main":[[{"node":"Parse LLM Response","type":"main","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Generate Email Body","type":"ai_languageModel","index":0}]]},"Parse LLM Response":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Send Email (Code Node)":{"main":[[]]},"Merge":{"main":[[{"node":"Send Email (Code Node)","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Webhook":[{"json":{"headers":{"host":"n8n.eecie.ca","user-agent":"WordPress/6.8.2; https://portal.eecie.ca","accept":"*/*","accept-encoding":"deflate, gzip, br, zstd","content-type":"application/json; charset=utf-8","origin":"https://n8n.eecie.ca","x-forwarded-proto":"https","x-forwarded-for":"2607:5300:203:15ac::1","x-forwarded-host":"n8n.eecie.ca","x-forwarded-server":"n8n.eecie.ca","content-length":"16","connection":"Keep-Alive"},"params":{},"query":{},"body":{"devis_id":334},"webhookUrl":"https://n8n.eecie.ca/webhook/send-devis-draft","executionMode":"production"}}]},"versionId":"afeedc09-7e8c-4230-b255-12aa25a7882b","triggerCount":1,"shared":[{"createdAt":"2025-08-13T14:06:29.223Z","updatedAt":"2025-08-13T14:06:29.223Z","role":"workflow:owner","workflowId":"fxdT9CQHKJ211ncC","projectId":"t78m7QTVO4mkjY0H"}],"tags":[]}