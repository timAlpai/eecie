{"createdAt":"2025-07-21T16:39:46.673Z","updatedAt":"2025-08-19T23:09:59.371Z","id":"QBSaKz0NSWaWUngw","name":"Devis_Mail_Sending_daily","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"triggerAtHour":8}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-176,0],"id":"5725df24-4959-494a-a15c-d291b353dd3f","name":"Schedule Trigger"},{"parameters":{"databaseId":52,"tableId":703,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6828,"operator":"single_select_equal","value":"3011"},{"field":7219,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[32,0],"id":"0f43b7db-0912-4ce8-bbc6-d044e93ac1cb","name":"Get Status Confirmation","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[224,16],"id":"d4b83ee3-a497-4966-a4ca-5b1c0b5ea410","name":"Loop Over Items"},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me","typeVersion":1,"position":[4320,96],"id":"c77611c9-5fc5-4534-9fc7-6f89d40da7e6"},{"parameters":{"operation":"get","databaseId":52,"tableId":710,"rowId":"={{ $json.Contacts[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[768,-48],"id":"5ac57bb1-99ed-4167-bac2-41fd2ef8513d","name":"Get Contact","alwaysOutputData":false,"credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}},"onError":"continueRegularOutput"},{"parameters":{"operation":"get","databaseId":52,"tableId":704,"rowId":"={{ $json.Devis[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[640,64],"id":"58c961e1-e1f7-41f8-8c2e-b249c2d509f9","name":"Get Devis","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}},"onError":"continueRegularOutput"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1040,48],"id":"fa26e372-b1b8-41a8-886b-a139c5190b94","name":"Merge"},{"parameters":{"promptType":"define","text":"=Voici les informations a ta disposition :\n\nFormat du mail html\n\nNom du client : {{ $json.Nom }}\nAdresse Email : {{ $json.Email }}\n\n{{ $('Loop Over Items').item.json.Travaux }}\n\n\n<a href=\\\"{{ $json.File[0].url }}\\\">{{ $('Get Devis').item.json.File[0].visible_name }}</a>\n\n\n\nCrée le mail pour l'envois de ce devis soit professionnel et amical\nAucune explication je le corps du mail et le sujet une simple structure json.\n\npas de préfixe python''' ni aucun texte autre que\n\n{\n  \"sujet\": str,\n  \"data\": str,\n  \"email\": str,\n  \n}\n/no_think","messages":{"messageValues":[{"message":"=You are a text-processing expert. Your task is to transform raw JSON data (exported from a CRM like Baserow) into a well-structured Python dictionary that will be used to fill a Jinja2  template.\n\nThe goal is to generate a professional email for a client. The final output must be a single Python dict with the following structure:\n\n{\n  \"sujet\": str,\n  \"data\": str,\n  \"email\": str,\n  \n}\n--- TASK ---\n\nStep 1. Carefully analyze the input data.\nStep 2. Extract the relevant information and format the values correctly.\nStep 3. Output only the final dictionary, nothing else IMPORTANT no prefixe like python''''''' or code '''''' etc .\n\nInput data (from CRM):\n\n[INSERT RAW JSON HERE]\n/no_think"}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[1312,-80],"id":"f12a7eb4-71bd-48ac-bdd0-9cbe7b276579","name":"Basic LLM Chain"},{"parameters":{"model":"qwen/qwen3-32b","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[1312,96],"id":"99ff4efb-46b0-4be3-a1a2-7e94e4c61a0c","name":"Groq Chat Model","credentials":{"groqApi":{"id":"HwEaU3wVnHbaSIU9","name":"Groq account"}}},{"parameters":{"operation":"create","databaseId":52,"tableId":711,"fieldsUi":{"fieldValues":[{"fieldId":6863,"fieldValue":"Email"},{"fieldId":6864,"fieldValue":"={{ $now }}"},{"fieldId":6865,"fieldValue":"={{ $json.structuredData.sujet }}\n\n{{ $json.structuredData.email }}\n\n{{ $json.structuredData.data }}\n\nFichier Devis \n<a href=\"{{ $('Merge').item.json.File[0].url}}\">{{ $('Merge').item.json.File[0].visible_name }}</a>\n"},{"fieldId":6908,"fieldValue":"={{ $('Merge').item.json.Appels[0].id }}"},{"fieldId":6880,"fieldValue":"={{ $('Merge').item.json.contactId }}"},{"fieldId":6882,"fieldValue":"={{ $('Merge').item.json['opportunités'][0].id }}"},{"fieldId":6914,"fieldValue":"True"},{"fieldId":6868,"fieldValue":"True"},{"fieldId":6867,"fieldValue":"={{ $('Get Devis').item.json.File[0].name}}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2576,-144],"id":"f3be0dcd-9293-4374-b09e-1f2c489d8d05","name":"Create interaction mail complete","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":52,"tableId":703,"rowId":"={{ $('Merge').item.json['opportunités'][0].id }}","fieldsUi":{"fieldValues":[{"fieldId":6828,"fieldValue":"Attente"},{"fieldId":7218,"fieldValue":"True"},{"fieldId":7219,"fieldValue":"={{ $json.id }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2800,-144],"id":"abf88b31-f856-4b21-9681-e8a9858595a0","name":"Update Task_input status","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":705,"rowId":"={{ $json.T1_user[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3152,-144],"id":"94439331-1b24-4cdd-9884-adfbeefdb69d","name":"Get a row","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"jsCode":"// Get the raw string output from the previous node\n// Replace 'llm_response_field' with the actual name of the field containing the text\nconst rawResponse = $('Basic LLM Chain').item.json.text;\n// This regular expression finds the <think> block and any whitespace after it\n// It's designed to be robust even if the think block has content or newlines\nconst regex = /<think>[\\s\\S]*?<\\/think>\\s*/;\n\n// Remove the matched <think> block from the string\nconst cleanedString = rawResponse.replace(regex, '');\n\n// Now that we have a clean JSON string, parse it into a JavaScript object\nconst jsonData = JSON.parse(cleanedString);\n\n// Return the parsed data in a new field called 'structuredData'\n// This makes it easy to reference in the next node\nreturn {\n  structuredData: jsonData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1744,-128],"id":"327cca94-ac7a-412f-b65d-8fb256f73822","name":"Clean and Parse LLM Response"},{"parameters":{"jsCode":"const nodemailer = require('nodemailer');\nconst imaps = require('imap-simple');\n// On importe la bonne fonction depuis le module, comme corrigé précédemment\nconst { createMimeMessage } = require('mail-mime-builder');\n\n// --- RÉCUPÉRATION DES DONNÉES ENTRANTES ---\nconst item = $input.first();\n\n\n// --- LOGIQUE PRINCIPALE ---\ntry {\n  const attachmentBuffer = await this.helpers.getBinaryDataBuffer(0, 'data');\n  const nomFichier = item.binary['data'].fileName;\n  \n  const jsonData = item.json;\n  if (!item.binary) { $jsonData.action=\"draft\"; }\n \nconst destinataire = $('Clean and Parse LLM Response').first().json.structuredData.email;\nconst sujet =  $('Clean and Parse LLM Response').first().json.structuredData.sujet;\nconst corps =  $('Clean and Parse LLM Response').first().json.structuredData.data;\nconst smtpUser = jsonData.Email;\nconst smtpPass = jsonData.decrypted_password;\nconst action = jsonData.action || 'draft';\nconst mailHost = \"eecie.ca\";\n\n const mailOptions = {\n    from: `\"${smtpUser}\" <${smtpUser}>`,\n    to: destinataire,\n    subject: sujet,\n    html: corps,\n    attachments: [{\n      filename: nomFichier,\n      content: attachmentBuffer, // Le Buffer binaire brut\n      contentType: 'application/pdf',\n    }],\n  };\n  \n  let result;\n  if (action === 'draft') {\n    result = await saveAsDraft(mailOptions, { smtpUser, smtpPass, mailHost });\n  } else {\n    // La fonction sendEmail utilise nodemailer et fonctionne déjà\n    result = await sendEmail(mailOptions, { smtpUser, smtpPass, mailHost });\n  }\n  \n  return [{ json: result }];\n  \n} catch (error) {\n  console.error(error);\n  throw error;\n}\n\n// --- FONCTIONS D'AIDE ---\n\nasync function sendEmail(mailOptions, authConfig) {\n  const transporter = nodemailer.createTransport({\n    host: authConfig.mailHost, port: 587, secure: false,\n    auth: { user: authConfig.smtpUser, pass: authConfig.smtpPass },\n    tls: { rejectUnauthorized: false }\n  });\n  const info = await transporter.sendMail(mailOptions);\n  return { success: true, message: `Mail envoyé à ${mailOptions.to}`, messageId: info.messageId };\n}\n\n// =======================================================================\n// FONCTION SAVEASDRAFT DÉFINITIVE AVEC mail-mime-builder\n// =======================================================================\nasync function saveAsDraft(mailOptions, authConfig) {\n  \n  const msg = createMimeMessage();\n  msg.setSender(mailOptions.from);\n  msg.setTo(mailOptions.to);\n  msg.setSubject(mailOptions.subject);\n  \n  // Le corps du message HTML\n  msg.addMessage({\n    contentType: 'text/html', // Le charset est correct\n    data: mailOptions.html\n  });\n  \n  const attachment = mailOptions.attachments[0];\n\n  // =========================================================\n  // LA CORRECTION QUE NOUS AVIONS MANQUÉE\n  // =========================================================\n  // 1. On convertit le Buffer binaire en une chaîne de caractères Base64.\n  const attachmentBase64 = attachment.content.toString('base64');\n\n  // 2. On ajoute la pièce jointe avec la donnée encodée\n  msg.addAttachment({\n    filename: attachment.filename,\n    contentType: attachment.contentType,\n    data: attachmentBase64, // On passe la chaîne Base64\n    // 3. On ajoute l'en-tête qui dit au client mail comment décoder\n    //    (la bibliothèque le fait peut-être automatiquement, mais être explicite est plus sûr)\n    headers: { 'Content-Transfer-Encoding': 'base64' }\n  });\n  \n  const rawEmail = msg.asRaw();\n\n  // La partie IMAP avec imap-simple (qui est fiable)\n  const config = {\n    imap: {\n      user: authConfig.smtpUser, password: authConfig.smtpPass,\n      host: authConfig.mailHost, port: 993, tls: true,\n      tlsOptions: { rejectUnauthorized: false }\n    }\n  };\n\n  let connection;\n  try {\n    connection = await imaps.connect(config);\n    const draftFolderName = 'Drafts';\n    await connection.append(rawEmail, {\n      mailbox: draftFolderName,\n      flags: ['\\\\Draft', '\\\\Seen']\n    });\n    connection.end();\n    return { success: true, message: `Brouillon sauvegardé avec succès dans '${draftFolderName}'` };\n  } catch (err) {\n    if (connection) connection.end();\n    throw new Error(`Erreur IMAP (imap-simple): ${err.message}`);\n  }\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3856,-64],"id":"a3cefbe6-7dc8-4784-ad41-9b6da2aa8415","name":"Code"},{"parameters":{"jsCode":"const crypto = require('crypto');\n\nconst SECRET_KEY = $env['GCE_SHARED_SECRET_KEY'];\nconst IV = $env['GCE_SHARED_IV'];\nconst ALGORITHM = 'aes-256-cbc';\n// --- DEBUT BLOC DE DEBUG ---\nconsole.log(\"Clé secrète utilisée (longueur):\", SECRET_KEY ? SECRET_KEY.length : \"Non définie\");\nconsole.log(\"IV utilisé (longueur):\", IV ? IV.length : \"Non défini\");\nif (!SECRET_KEY || SECRET_KEY.length !== 32) {\n  throw new Error(\"ERREUR: GCE_SHARED_SECRET_KEY est manquante ou n'a pas une longueur de 32 caractères.\");\n}\nif (!IV || IV.length !== 16) {\n  throw new Error(\"ERREUR: GCE_SHARED_IV est manquante ou n'a pas une longueur de 16 caractères.\");\n}\n// --- FIN BLOC DE DEBUG ---\n\nconst item = items[0].json;\nconst encryptedData = item.sec1;\n\nconsole.log(\"Donnée chiffrée reçue:\", encryptedData);\n\nif (!encryptedData) {\n  console.log(\"Aucune donnée à déchiffrer.\");\n  item.decrypted_password = null;\n  return [item];\n}\n\ntry {\n  const decipher = crypto.createDecipheriv(ALGORITHM, Buffer.from(SECRET_KEY), Buffer.from(IV));\n\n  let decrypted = decipher.update(encryptedData, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  console.log(\"Déchiffrement réussi !\");\n  item.decrypted_password = decrypted;\n\n} catch (error) {\n  console.error(\"Le déchiffrement a échoué. Voir l'erreur ci-dessous.\");\n  // On jette l'erreur pour la voir dans l'UI de N8N\n  throw error;\n}\n\nreturn [item];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3360,-144],"id":"666f547e-a3cb-4dff-b468-e0d19b429634","name":"get imap password"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8dabe658-e545-4e51-99ad-8676e9e9afc7","leftValue":"={{ $('Get Contact').item.json.Email }}","rightValue":"","operator":{"type":"string","operation":"empty","singleValue":true}},{"id":"1c102299-47f0-4d77-b145-90f93e998c66","leftValue":"={{ $('Get Contact').item.json.Email }}","rightValue":"example.com","operator":{"type":"string","operation":"contains"}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1904,-320],"id":"768a237d-4eaf-4a58-bc95-971f0a7c84de","name":"si pas de mail addr"},{"parameters":{"operation":"create","databaseId":52,"tableId":712,"fieldsUi":{"fieldValues":[{"fieldId":6869,"fieldValue":"MAIL MANQUANT"},{"fieldId":6886,"fieldValue":"={{ $('Merge').item.json.T1_user[0].id }}"},{"fieldId":6884,"fieldValue":"={{ $('Get Contact').item.json.id }}"},{"fieldId":6872,"fieldValue":"Creation"},{"fieldId":6873,"fieldValue":"Urgence"},{"fieldId":6885,"fieldValue":"={{ $('Merge').item.json['opportunités'][0].id }}"},{"fieldId":6870,"fieldValue":"=Addresse Mail pour le Contacte {{ $('Get Contact').item.json.Nom }} =>{{ $('Get Contact').item.json.id }} \n\nDévis non envoyé !\n{{ $('Get Devis').item.json.id }}\n\n{{ $('Get Devis').item.json.File[0].url }}"},{"fieldId":6871,"fieldValue":"={{ $now.plus(1, 'days') }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2576,-352],"id":"84f869e7-4dbb-4bf3-b11c-82166882c7bf","name":"CreationTacheMailAbsent","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":52,"tableId":703,"rowId":"={{ $('Merge').item.json['opportunités'][0].id }}","fieldsUi":{"fieldValues":[{"fieldId":6828,"fieldValue":"Erreur"},{"fieldId":7222,"fieldValue":"=Confirmation"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2832,-368],"id":"6ac26b40-f2a9-45a7-a032-7e24356a3b73","name":"Update Task_input status1","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"url":"={{ $json.File[0].url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[784,160],"id":"7f1b53eb-6c76-4d58-b494-ca975eb48844","name":"HTTP Request"},{"parameters":{"jsCode":"// Ce noeud de code a pour unique but de vérifier la disponibilité des modules externes\n// que vous avez configurés dans votre docker-compose.yml.\n// Copiez-collez ce code pour diagnostiquer les erreurs \"Cannot find module\".\n\nconst modulesToCheck = [\n  'nodemailer',        // Pour l'envoi de mail\n  'axios',             // Pour les requêtes HTTP\n  'imap-simple',       // Le module IMAP que nous visons (utilisé par le noeud communautaire)\n  'imapflow',          // Ancien module que nous avons essayé\n  'node-imap',         // Ancien module que nous avons essayé\n  'mail-mime-builder'  // Ancien module que nous avons essayé\n];\n\nconst results = [];\n\nfor (const moduleName of modulesToCheck) {\n  try {\n    // Tente de charger le module\n    require(moduleName);\n    results.push({\n      module: moduleName,\n      status: '✅ Trouvé et accessible'\n    });\n  } catch (error) {\n    // Si le chargement échoue, on capture l'erreur\n    if (error.code === 'MODULE_NOT_FOUND') {\n      results.push({\n        module: moduleName,\n        status: '❌ INTROUVABLE',\n        erreur: `Le module n'est pas autorisé. Vérifiez NODE_FUNCTION_ALLOW_EXTERNAL.`\n      });\n    } else {\n      results.push({\n        module: moduleName,\n        status: '❌ ERREUR INCONNUE',\n        erreur: error.message\n      });\n    }\n  }\n}\n\n// Prépare un objet de sortie clair pour N8N\nconst summary = {\n  description: \"Rapport de disponibilité des modules. Si un module est 'INTROUVABLE', assurez-vous qu'il est bien listé dans la variable d'environnement NODE_FUNCTION_ALLOW_EXTERNAL de votre docker-compose.yml et que vous avez bien recréé le conteneur (`docker-compose down` puis `docker-compose up -d`).\",\n  rapport_modules: results\n};\n\n// Retourne le résultat dans le format attendu par N8N\nreturn [{\n  json: summary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[48,416],"id":"a4794a6f-a42e-4861-8a28-7536bc05d273","name":"Code1"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[3600,-64],"id":"2d602a5d-5708-40a5-9796-0b104c9b331e","name":"Merge1"},{"parameters":{"jsCode":"// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.hasEmailTrue = false;\n}\n\nreturn $input.all();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2320,-416],"id":"499baf4f-63f0-4591-bf0d-bad02aaa75e0","name":"Code2"},{"parameters":{"jsCode":"// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.hasEmailTrue = true;\n}\n\nreturn $input.all();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2112,-224],"id":"22544f54-d199-4b9c-a2c7-f1a8f081e374","name":"Code3"}],"connections":{"Schedule Trigger":{"main":[[{"node":"Get Status Confirmation","type":"main","index":0}]]},"Get Status Confirmation":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Get Contact","type":"main","index":0},{"node":"Get Devis","type":"main","index":0}]]},"Replace Me":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Get Contact":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Get Devis":{"main":[[{"node":"Merge","type":"main","index":1},{"node":"HTTP Request","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"Clean and Parse LLM Response","type":"main","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Create interaction mail complete":{"main":[[{"node":"Update Task_input status","type":"main","index":0}]]},"Update Task_input status":{"main":[[{"node":"Get a row","type":"main","index":0}]]},"Get a row":{"main":[[{"node":"get imap password","type":"main","index":0}]]},"Clean and Parse LLM Response":{"main":[[{"node":"si pas de mail addr","type":"main","index":0}]]},"Code":{"main":[[{"node":"Replace Me","type":"main","index":0}]]},"get imap password":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"si pas de mail addr":{"main":[[{"node":"Code2","type":"main","index":0}],[{"node":"Code3","type":"main","index":0}]]},"CreationTacheMailAbsent":{"main":[[{"node":"Update Task_input status1","type":"main","index":0}]]},"Update Task_input status1":{"main":[[{"node":"Get a row","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"Merge1":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code2":{"main":[[{"node":"CreationTacheMailAbsent","type":"main","index":0}]]},"Code3":{"main":[[{"node":"Create interaction mail complete","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"d10e1656-f432-410a-b046-fa2db6821cf1","triggerCount":1,"shared":[{"createdAt":"2025-07-21T16:39:46.673Z","updatedAt":"2025-07-21T16:39:46.673Z","role":"workflow:owner","workflowId":"QBSaKz0NSWaWUngw","projectId":"t78m7QTVO4mkjY0H"}],"tags":[]}