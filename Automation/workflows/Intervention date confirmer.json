{"createdAt":"2025-08-08T21:23:49.603Z","updatedAt":"2025-08-09T16:23:07.409Z","id":"JllNakXAwk27dUcR","name":"Intervention date confirmer","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"a2479dd8-262e-4f04-9860-fce45ef6da78","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-352,-16],"id":"8760fda2-de8b-4542-beee-f5f10eaab29e","name":"Webhook","webhookId":"a2479dd8-262e-4f04-9860-fce45ef6da78"},{"parameters":{"operation":"get","databaseId":52,"tableId":703,"rowId":"={{ $json.body.items[0].Opportunite_liee[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-144,-112],"id":"f8e9443a-ce15-4154-bd54-50e6f5c9188e","name":"Get opportunité","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":713,"rowId":"={{ $json.body.items[0].Fournisseur_concerne[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-144,320],"id":"ce9a5891-9f59-4ced-b6fd-4c73fc4ffcf1","name":"Get fournisseur","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":710,"rowId":"={{ $json.Contacts[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[64,320],"id":"4317af50-5d75-46d8-90e1-67d9c25a2c24","name":"Get fournisseur contact","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":710,"rowId":"={{ $json.Contacts[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[64,-112],"id":"c653a6a3-8ae7-48c6-a819-508e36d5ecea","name":"Get opportunité contact","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":704,"rowId":"={{ $json.Devis[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[64,80],"id":"d6d9b677-a00c-4fe4-9f29-1146fa4ad1cf","name":"Get devis","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"numberInputs":3},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[528,64],"id":"b1ecc553-0811-48a9-82fb-5bacf7ad184b","name":"Merge"},{"parameters":{"promptType":"define","text":"=Voici les informations a ta disposition :\n\nFormat du mail html\n\nNom du client : {{ $json.Nom }}\nAdresse Email Client : {{ $('Get opportunité contact').item.json.Email }}\nNom prestataire : {{ $('Get fournisseur contact').item.json.Nom }}\nAdresse Email Prestataire : {{ $('Get fournisseur contact').item.json.Email }}\n{{ $('Get opportunité').item.json.Travaux }}\n\nDate de rendez vous : {{ $('Webhook').item.json.body.items[0].Date_Heure_RDV }}\n\n\nla signature est l'utilisateur : {{ $json.T1_user[0].value }}\nCrée le mail pour l'envois de cette confirmation de rendez vous pour l'intervention que ce soit professionnel et amical\nAucune explication je le corps du mail et le sujet une simple structure json.\n\npas de préfixe python''' ni aucun texte autre que\n\n{\n  \"sujet\": str,\n  \"intro to client\": str,\n  \"intro to prestataire\": str,\n  \"data\": str,\n  \"email client\": str,\n  \"email prestataire\": str,\n  \n}\n/no_think","messages":{"messageValues":[{"message":"=You are a text-processing expert. Your task is to transform raw JSON data (exported from a CRM like Baserow) into a well-structured Python dictionary that will be used to fill a Jinja2  template.\n\nThe goal is to generate a professional email for a client and a provider. The final output must be a single Python dict with the following structure:\n\n{\n  \"sujet\": str,\n  \"intro to client\": str,\n  \"intro to prestataire\": str,\n  \"data\": str,\n  \"email client\": str,\n  \"email prestataire\": str,\n  \n}\n--- TASK ---\n\nStep 1. Carefully analyze the input data.\nStep 2. Extract the relevant information and format the values correctly.\nStep 3. Output only the final dictionary, nothing else IMPORTANT no prefixe like python''''''' or code '''''' etc .\n\nInput data (from CRM):\n\n[INSERT RAW JSON HERE]\n/no_think"}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[928,80],"id":"b495ba42-33b8-4bed-9473-2970d56df8c5","name":"Basic LLM Chain"},{"parameters":{"model":"qwen/qwen3-32b","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[912,336],"id":"54c68faa-3c15-4f14-a987-29b3786b2a75","name":"Groq Chat Model","credentials":{"groqApi":{"id":"HwEaU3wVnHbaSIU9","name":"Groq account"}}},{"parameters":{"jsCode":"// Get the raw string output from the previous node\n// Replace 'llm_response_field' with the actual name of the field containing the text\nconst rawResponse = $('Basic LLM Chain').item.json.text;\n// This regular expression finds the <think> block and any whitespace after it\n// It's designed to be robust even if the think block has content or newlines\nconst regex = /<think>[\\s\\S]*?<\\/think>\\s*/;\n\n// Remove the matched <think> block from the string\nconst cleanedString = rawResponse.replace(regex, '');\n\n// Now that we have a clean JSON string, parse it into a JavaScript object\nconst jsonData = JSON.parse(cleanedString);\n\n// Return the parsed data in a new field called 'structuredData'\n// This makes it easy to reference in the next node\nreturn {\n  structuredData: jsonData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1328,80],"id":"7252d2af-da6c-476a-82b8-ce21924ca221","name":"Clean and Parse LLM Response"},{"parameters":{"jsCode":"const crypto = require('crypto');\n\nconst SECRET_KEY = $env['GCE_SHARED_SECRET_KEY'];\nconst IV = $env['GCE_SHARED_IV'];\nconst ALGORITHM = 'aes-256-cbc';\n\nif (!SECRET_KEY || SECRET_KEY.length !== 32) {\n  throw new Error(\"ERREUR: GCE_SHARED_SECRET_KEY est manquante ou n'a pas une longueur de 32 caractères.\");\n}\nif (!IV || IV.length !== 16) {\n  throw new Error(\"ERREUR: GCE_SHARED_IV est manquante ou n'a pas une longueur de 16 caractères.\");\n}\n// --- FIN BLOC DE DEBUG ---\n\nconst item = items[0].json;\nconst encryptedData = item.sec1;\n\n\n\nif (!encryptedData) {\n \n  item.decrypted_password = null;\n  return [item];\n}\n\ntry {\n  const decipher = crypto.createDecipheriv(ALGORITHM, Buffer.from(SECRET_KEY), Buffer.from(IV));\n\n  let decrypted = decipher.update(encryptedData, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  \n  item.decrypted_password = decrypted;\n\n} catch (error) {\n\n  throw error;\n}\n\nreturn [item];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1856,80],"id":"c433aa4a-83bc-4277-9002-98f2368325b2","name":"get imap password"},{"parameters":{"operation":"get","databaseId":52,"tableId":705,"rowId":"={{ $('Get opportunité').item.json.T1_user[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1600,80],"id":"ea853041-ac6f-48d6-a424-2abdc45bcbc8","name":"Get a row1","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"jsCode":"const nodemailer = require('nodemailer');\nconst imaps = require('imap-simple');\n// On importe la bonne fonction depuis le module, comme corrigé précédemment\nconst { createMimeMessage } = require('mail-mime-builder');\n\n// --- RÉCUPÉRATION DES DONNÉES ENTRANTES ---\nconst item = $input.first();\n// ===================================================================\n//  EMAIL TEMPLATE (Basé sur le Look & Feel du PDF)\n// ===================================================================\nconst emailTemplate = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>__SUJET_PLACEHOLDER__</title>\n    <style>\n        body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            font-size: 11pt;\n            color: #333;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f7f6;\n        }\n        .wrapper {\n            width: 100%;\n            background-color: #f4f7f6;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        .container {\n            max-width: 700px;\n            margin: auto;\n            background-color: #ffffff;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        .header {\n            padding: 25px 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-start;\n            background-color: #f8f8f8;\n            border-bottom: 1px solid #eee;\n        }\n        .company-info {\n            line-height: 1.4;\n            font-size: 9pt;\n            color: #555;\n        }\n        .company-name {\n            font-size: 20pt;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 8px;\n        }\n        .content {\n            padding: 30px;\n            line-height: 1.6;\n        }\n        .content a {\n            color: #2E75B5;\n            font-weight: bold;\n            text-decoration: none;\n        }\n        .content a:hover {\n            text-decoration: underline;\n        }\n        .footer {\n            padding: 20px 30px;\n            text-align: center;\n            font-size: 9pt;\n            color: #888;\n            background-color: #f8f8f8;\n            border-top: 1px solid #eee;\n        }\n        .footer a {\n            color: #2E75B5;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"header\">\n                <div>\n                    <div class=\"company-name\">Excellence Executive Cie</div>\n                    <div class=\"company-info\">\n                        1016 Rue Melançon, Saint-Jérôme QC J7J6X7<br>\n                        +1 514 268-4393 | info@ee-cie.ca\n                    </div>\n                </div>\n            </div>\n            <div class=\"content\">\n                __BODY_PLACEHOLDER__\n            </div>\n            <div class=\"footer\">\n                <p>\n                    <a href=\"https://ee-cie.ca\">https://ee-cie.ca</a><br>\n                    NEQ: 742845506RT0001 | TVQ: 4012787052\n                </p>\n                <p>Cet e-mail est un message de service automatisé.</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// --- LOGIQUE PRINCIPALE ---\ntry {\n  \n  let jsonData = item.json;\n \n const destinataire =  $('Clean and Parse LLM Response').first().json.structuredData['email client'];\n  const sujet =  $('Clean and Parse LLM Response').first().json.structuredData.sujet;\n  const corpsGenereParLlm =  $('Clean and Parse LLM Response').first().json.structuredData['intro to client'] + '<br>' + $('Clean and Parse LLM Response').first().json.structuredData.data;\n  \n  \n\n\n// On ajoute le bouton au corps de l'e-mail\nconst corpsAvecBouton = corpsGenereParLlm  ;\n\n// On injecte le tout dans le template final\nlet finalHtml = emailTemplate.replace('__BODY_PLACEHOLDER__', corpsAvecBouton);\nfinalHtml = finalHtml.replace('__SUJET_PLACEHOLDER__', sujet);\n \n  const smtpUser = jsonData.Email;\n  const smtpPass = jsonData.decrypted_password;\n  const mailHost = \"eecie.ca\";\n\n  const mailOptions = {\n    from: `\"Excellence Executive Cie\" <${smtpUser}>`, // From Name amélioré\n    to: destinataire,\n    subject: sujet,\n    html: finalHtml,\n    \n  };\n  \n  \n  const authConfig = { smtpUser, smtpPass, mailHost };\n  let result;\n\n  \n    result = await sendAndSaveEmail(mailOptions, authConfig, 'Sent');\n\n  return [{ json: result }];\n  \n} catch (error) {\n  console.error(error);\n  throw error;\n}\n\n// --- FONCTIONS D'AIDE (Aucun changement ici, à conserver telles quelles) ---\n\nasync function sendAndSaveEmail(mailOptions, authConfig, sentMailboxName) {\n  const transporter = nodemailer.createTransport({\n    host: authConfig.mailHost, port: 587, secure: false,\n    auth: { user: authConfig.smtpUser, pass: authConfig.smtpPass },\n    tls: { rejectUnauthorized: false }\n  });\n\n  const info = await transporter.sendMail(mailOptions);\n  console.log(`Email envoyé avec succès à ${mailOptions.to}. MessageId: ${info.messageId}`);\n  \n  try {\n    await saveToMailbox(mailOptions, authConfig, sentMailboxName);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} et sauvegardé dans '${sentMailboxName}'`, messageId: info.messageId };\n  } catch (imapError) {\n    console.error(`L'email a été envoyé, mais la sauvegarde dans '${sentMailboxName}' a échoué:`, imapError.message);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} mais échec de la sauvegarde.`, warning: imapError.message, messageId: info.messageId };\n  }\n}\n\nasync function saveToMailbox(mailOptions, authConfig, mailboxName) {\n  const msg = createMimeMessage();\n  msg.setSender(mailOptions.from);\n  msg.setTo(mailOptions.to);\n  msg.setSubject(mailOptions.subject);\n  \n  msg.addMessage({ contentType: 'text/html', data: mailOptions.html });\n  \n  if (mailOptions.attachments && mailOptions.attachments.length > 0) {\n    const attachment = mailOptions.attachments[0];\n    const attachmentBase64 = attachment.content.toString('base64');\n    msg.addAttachment({\n      filename: attachment.filename,\n      contentType: attachment.contentType,\n      data: attachmentBase64,\n      headers: { 'Content-Transfer-Encoding': 'base64' }\n    });\n  }\n  \n  const rawEmail = msg.asRaw();\n  const flags = mailboxName === 'Drafts' ? ['\\\\Draft', '\\\\Seen'] : ['\\\\Seen'];\n\n  const config = {\n    imap: {\n      user: authConfig.smtpUser, password: authConfig.smtpPass,\n      host: authConfig.mailHost, port: 993, tls: true,\n      tlsOptions: { rejectUnauthorized: false }\n    }\n  };\n\n  let connection;\n  try {\n    connection = await imaps.connect(config);\n    await connection.append(rawEmail, { mailbox: mailboxName, flags: flags });\n    connection.end();\n    return { success: true, message: `Email sauvegardé avec succès dans '${mailboxName}'` };\n  } catch (err) {\n    if (connection) connection.end();\n    throw new Error(`Erreur IMAP: Impossible de sauvegarder dans '${mailboxName}'. Détails: ${err.message}`);\n  }\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2176,-48],"id":"f5a1a7f6-33f7-4a58-9cd0-6d45372c6ba1","name":"send imap client"},{"parameters":{"jsCode":"const nodemailer = require('nodemailer');\nconst imaps = require('imap-simple');\n// On importe la bonne fonction depuis le module, comme corrigé précédemment\nconst { createMimeMessage } = require('mail-mime-builder');\n\n// --- RÉCUPÉRATION DES DONNÉES ENTRANTES ---\nconst item = $input.first();\n// ===================================================================\n//  EMAIL TEMPLATE (Basé sur le Look & Feel du PDF)\n// ===================================================================\nconst emailTemplate = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>__SUJET_PLACEHOLDER__</title>\n    <style>\n        body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            font-size: 11pt;\n            color: #333;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f7f6;\n        }\n        .wrapper {\n            width: 100%;\n            background-color: #f4f7f6;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        .container {\n            max-width: 700px;\n            margin: auto;\n            background-color: #ffffff;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        .header {\n            padding: 25px 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-start;\n            background-color: #f8f8f8;\n            border-bottom: 1px solid #eee;\n        }\n        .company-info {\n            line-height: 1.4;\n            font-size: 9pt;\n            color: #555;\n        }\n        .company-name {\n            font-size: 20pt;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 8px;\n        }\n        .content {\n            padding: 30px;\n            line-height: 1.6;\n        }\n        .content a {\n            color: #2E75B5;\n            font-weight: bold;\n            text-decoration: none;\n        }\n        .content a:hover {\n            text-decoration: underline;\n        }\n        .footer {\n            padding: 20px 30px;\n            text-align: center;\n            font-size: 9pt;\n            color: #888;\n            background-color: #f8f8f8;\n            border-top: 1px solid #eee;\n        }\n        .footer a {\n            color: #2E75B5;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"header\">\n                <div>\n                    <div class=\"company-name\">Excellence Executive Cie</div>\n                    <div class=\"company-info\">\n                        1016 Rue Melançon, Saint-Jérôme QC J7J6X7<br>\n                        +1 514 268-4393 | info@ee-cie.ca\n                    </div>\n                </div>\n            </div>\n            <div class=\"content\">\n                __BODY_PLACEHOLDER__\n            </div>\n            <div class=\"footer\">\n                <p>\n                    <a href=\"https://ee-cie.ca\">https://ee-cie.ca</a><br>\n                    NEQ: 742845506RT0001 | TVQ: 4012787052\n                </p>\n                <p>Cet e-mail est un message de service automatisé.</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// --- LOGIQUE PRINCIPALE ---\ntry {\n  \n  let jsonData = item.json;\n \n const destinataire =  $('Clean and Parse LLM Response').first().json.structuredData['email prestataire'];\n  const sujet =  $('Clean and Parse LLM Response').first().json.structuredData.sujet;\n  const corpsGenereParLlm =  $('Clean and Parse LLM Response').first().json.structuredData['intro to prestataire'] + '<br>' + $('Clean and Parse LLM Response').first().json.structuredData.data +'<br>';\n  \n  \n  const devisId = $('Get devis').first().json.id;\n\n// On ajoute le bouton au corps de l'e-mail\nconst corpsAvecBouton = corpsGenereParLlm  ;\n\n// On injecte le tout dans le template final\nlet finalHtml = emailTemplate.replace('__BODY_PLACEHOLDER__', corpsAvecBouton);\nfinalHtml = finalHtml.replace('__SUJET_PLACEHOLDER__', sujet);\n \n  const smtpUser = jsonData.Email;\n  const smtpPass = jsonData.decrypted_password;\n  const mailHost = \"eecie.ca\";\n\n  const mailOptions = {\n    from: `\"Excellence Executive Cie\" <${smtpUser}>`, // From Name amélioré\n    to: destinataire,\n    subject: sujet,\n    html: finalHtml,\n    \n  };\n  \n  \n  const authConfig = { smtpUser, smtpPass, mailHost };\n  let result;\n\n  \n    result = await sendAndSaveEmail(mailOptions, authConfig, 'Sent');\n\n  return [{ json: result }];\n  \n} catch (error) {\n  console.error(error);\n  throw error;\n}\n\n// --- FONCTIONS D'AIDE (Aucun changement ici, à conserver telles quelles) ---\n\nasync function sendAndSaveEmail(mailOptions, authConfig, sentMailboxName) {\n  const transporter = nodemailer.createTransport({\n    host: authConfig.mailHost, port: 587, secure: false,\n    auth: { user: authConfig.smtpUser, pass: authConfig.smtpPass },\n    tls: { rejectUnauthorized: false }\n  });\n\n  const info = await transporter.sendMail(mailOptions);\n  console.log(`Email envoyé avec succès à ${mailOptions.to}. MessageId: ${info.messageId}`);\n  \n  try {\n    await saveToMailbox(mailOptions, authConfig, sentMailboxName);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} et sauvegardé dans '${sentMailboxName}'`, messageId: info.messageId };\n  } catch (imapError) {\n    console.error(`L'email a été envoyé, mais la sauvegarde dans '${sentMailboxName}' a échoué:`, imapError.message);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} mais échec de la sauvegarde.`, warning: imapError.message, messageId: info.messageId };\n  }\n}\n\nasync function saveToMailbox(mailOptions, authConfig, mailboxName) {\n  const msg = createMimeMessage();\n  msg.setSender(mailOptions.from);\n  msg.setTo(mailOptions.to);\n  msg.setSubject(mailOptions.subject);\n  \n  msg.addMessage({ contentType: 'text/html', data: mailOptions.html });\n  \n  if (mailOptions.attachments && mailOptions.attachments.length > 0) {\n    const attachment = mailOptions.attachments[0];\n    const attachmentBase64 = attachment.content.toString('base64');\n    msg.addAttachment({\n      filename: attachment.filename,\n      contentType: attachment.contentType,\n      data: attachmentBase64,\n      headers: { 'Content-Transfer-Encoding': 'base64' }\n    });\n  }\n  \n  const rawEmail = msg.asRaw();\n  const flags = mailboxName === 'Drafts' ? ['\\\\Draft', '\\\\Seen'] : ['\\\\Seen'];\n\n  const config = {\n    imap: {\n      user: authConfig.smtpUser, password: authConfig.smtpPass,\n      host: authConfig.mailHost, port: 993, tls: true,\n      tlsOptions: { rejectUnauthorized: false }\n    }\n  };\n\n  let connection;\n  try {\n    connection = await imaps.connect(config);\n    await connection.append(rawEmail, { mailbox: mailboxName, flags: flags });\n    connection.end();\n    return { success: true, message: `Email sauvegardé avec succès dans '${mailboxName}'` };\n  } catch (err) {\n    if (connection) connection.end();\n    throw new Error(`Erreur IMAP: Impossible de sauvegarder dans '${mailboxName}'. Détails: ${err.message}`);\n  }\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2176,208],"id":"e2ec335b-44f8-437b-a9ba-e7dc4438bb2a","name":"send imap prestataire"}],"connections":{"Webhook":{"main":[[{"node":"Get opportunité","type":"main","index":0},{"node":"Get fournisseur","type":"main","index":0}]]},"Get fournisseur":{"main":[[{"node":"Get fournisseur contact","type":"main","index":0}]]},"Get opportunité":{"main":[[{"node":"Get opportunité contact","type":"main","index":0},{"node":"Get devis","type":"main","index":0}]]},"Get devis":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Get opportunité contact":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Get fournisseur contact":{"main":[[{"node":"Merge","type":"main","index":2}]]},"Basic LLM Chain":{"main":[[{"node":"Clean and Parse LLM Response","type":"main","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Clean and Parse LLM Response":{"main":[[{"node":"Get a row1","type":"main","index":0}]]},"get imap password":{"main":[[{"node":"send imap client","type":"main","index":0},{"node":"send imap prestataire","type":"main","index":0}]]},"Get a row1":{"main":[[{"node":"get imap password","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"send imap prestataire":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook":[{"json":{"headers":{"host":"n8n.eecie.ca","user-agent":"python-requests/2.32.3","accept-encoding":"gzip, deflate, br","accept":"*/*","content-type":"application/json","x-baserow-event":"rows.updated","x-baserow-delivery":"1c46df06-8194-4790-8a0b-ba58af197bfa","origin":"https://n8n.eecie.ca","x-forwarded-proto":"https","x-forwarded-for":"172.18.0.2","x-forwarded-host":"n8n.eecie.ca","x-forwarded-server":"n8n.eecie.ca","content-length":"986","connection":"Keep-Alive"},"params":{},"query":{},"body":{"table_id":755,"database_id":52,"workspace_id":40,"webhook_id":10,"event_id":"1c46df06-8194-4790-8a0b-ba58af197bfa","event_type":"rows.updated","items":[{"id":3,"order":"1.00000000000000000000","ID_rdv":3,"Opportunite_liee":[{"id":332,"value":"Timothée de Almeida","order":"167.00000000000000000000"}],"Fournisseur_concerne":[{"id":16,"value":"timothee Casqueira","order":"6.00000000000000000000"}],"Date_Heure_RDV":"2025-08-15T11:30:00Z","Validation_Token":"e9ff98694acf3e3fe348877c42c3cb63e42b73b3469487879e99f3e042ddab2a"}],"old_items":[{"id":3,"order":"1.00000000000000000000","ID_rdv":3,"Opportunite_liee":[{"id":332,"value":"Timothée de Almeida","order":"167.00000000000000000000"}],"Fournisseur_concerne":[{"id":16,"value":"timothee Casqueira","order":"6.00000000000000000000"}],"Date_Heure_RDV":"2025-08-15T15:30:00Z","Validation_Token":"e9ff98694acf3e3fe348877c42c3cb63e42b73b3469487879e99f3e042ddab2a"}]},"webhookUrl":"https://n8n.eecie.ca/webhook/a2479dd8-262e-4f04-9860-fce45ef6da78","executionMode":"production"}}]},"versionId":"62262c62-aa9e-431f-9fb3-e2d1173c8a5f","triggerCount":1,"tags":[]}