{"createdAt":"2025-08-08T21:23:49.603Z","updatedAt":"2025-10-06T16:00:28.666Z","id":"JllNakXAwk27dUcR","name":"Intervention date confirmer","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"a2479dd8-262e-4f04-9860-fce45ef6da78","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-352,-16],"id":"8760fda2-de8b-4542-beee-f5f10eaab29e","name":"Webhook","webhookId":"a2479dd8-262e-4f04-9860-fce45ef6da78"},{"parameters":{"operation":"get","databaseId":52,"tableId":703,"rowId":"={{ $json.body.items[0].Opportunite_liee[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-144,-112],"id":"f8e9443a-ce15-4154-bd54-50e6f5c9188e","name":"Get opportunité","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":713,"rowId":"={{ $json.body.items[0].Fournisseur_concerne[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-144,320],"id":"ce9a5891-9f59-4ced-b6fd-4c73fc4ffcf1","name":"Get fournisseur","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":710,"rowId":"={{ $json.Contacts[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[64,320],"id":"4317af50-5d75-46d8-90e1-67d9c25a2c24","name":"Get fournisseur contact","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":710,"rowId":"={{ $json.Contacts[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[64,-112],"id":"c653a6a3-8ae7-48c6-a819-508e36d5ecea","name":"Get opportunité contact","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":52,"tableId":704,"rowId":"={{ $json.Devis[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[64,80],"id":"d6d9b677-a00c-4fe4-9f29-1146fa4ad1cf","name":"Get devis","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"numberInputs":3},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[528,64],"id":"b1ecc553-0811-48a9-82fb-5bacf7ad184b","name":"Merge"},{"parameters":{"promptType":"define","text":"=Voici les informations a ta disposition :\n\nFormat du mail html\n\nNom du client : {{ $json.Nom }}\nAdresse Email Client (l'addresse email du client) : {{ $('Get opportunité contact').item.json.Email }}\n####\nNom prestataire : {{ $('Get fournisseur contact').first().json.Nom }}\nAdresse Email Prestataire (l'adresse email du fournisseur): {{ $('Get fournisseur contact').first().json.Email }}\n{{ $('Get opportunité').first().json.Travaux }}\n####\n\nDate de rendez vous : {{ $('Webhook').item.json.body.items[0].Date_Heure_RDV }}\nIl est important que tu ne change absolument pas ni la date ni l'heure du rendez vous\n####\nla signature est l'utilisateur : {{ $json.T1_user[0].value }}\nCrée le mail pour l'envois de cette confirmation de rendez vous pour l'intervention que ce soit professionnel et amical, vérifie bien les attribution nom client et nom prestataire, parfois il sont proche fait bien la différence prenom + nom , il faut que ce soit juste !\nAucune explication je le corps du mail et le sujet une simple structure json.\n\npas de préfixe python''' ni aucun texte autre que\n\n{\n  \"sujet\": str,\n  \"intro to client\": str,\n  \"intro to prestataire\": str,\n  \"data\": str,\n  \"email client\": str,\n  \"email prestataire\": str,\n  \n}\n/no_think","messages":{"messageValues":[{"message":"=You are a text-processing expert. Your task is to transform raw JSON data (exported from a CRM like Baserow) into a well-structured Python dictionary that will be used to fill a Jinja2  template.\nyou have to be strict in the client name and the prestataire name they are different\n\nThe goal is to generate a professional email for a client and a provider. The final output must be a single Python dict with the following structure:\n\n{\n  \"sujet\": str,\n  \"intro to client\": str,\n  \"intro to prestataire\": str,\n  \"data\": str,\n  \"email client\": str,\n  \"email prestataire\": str,\n  \n}\n--- TASK ---\n\nStep 1. Carefully analyze the input data.\nStep 2. Extract the relevant information and format the values correctly.\nStep 3. Output only the final dictionary, nothing else IMPORTANT no prefixe like python''''''' or code '''''' etc .\n\nInput data (from CRM):\n\n[INSERT RAW JSON HERE]\n/no_think"}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[928,80],"id":"b495ba42-33b8-4bed-9473-2970d56df8c5","name":"Basic LLM Chain"},{"parameters":{"model":"qwen/qwen3-32b","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[928,288],"id":"54c68faa-3c15-4f14-a987-29b3786b2a75","name":"Groq Chat Model","credentials":{"groqApi":{"id":"HwEaU3wVnHbaSIU9","name":"Groq account"}}},{"parameters":{"jsCode":"// Get the raw string output from the previous node\n// Replace 'llm_response_field' with the actual name of the field containing the text\nconst rawResponse = $('Basic LLM Chain').first().json.text;\n// This regular expression finds the <think> block and any whitespace after it\n// It's designed to be robust even if the think block has content or newlines\nconst regex = /<think>[\\s\\S]*?<\\/think>\\s*/;\n\n// Remove the matched <think> block from the string\nconst cleanedString = rawResponse.replace(regex, '');\n\n// Now that we have a clean JSON string, parse it into a JavaScript object\nconst jsonData = JSON.parse(cleanedString);\n\n// Return the parsed data in a new field called 'structuredData'\n// This makes it easy to reference in the next node\nreturn {\n  structuredData: jsonData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1232,80],"id":"7252d2af-da6c-476a-82b8-ce21924ca221","name":"Clean and Parse LLM Response"},{"parameters":{"jsCode":"const crypto = require('crypto');\n\nconst SECRET_KEY = $env['GCE_SHARED_SECRET_KEY'];\nconst IV = $env['GCE_SHARED_IV'];\nconst ALGORITHM = 'aes-256-cbc';\n\nif (!SECRET_KEY || SECRET_KEY.length !== 32) {\n  throw new Error(\"ERREUR: GCE_SHARED_SECRET_KEY est manquante ou n'a pas une longueur de 32 caractères.\");\n}\nif (!IV || IV.length !== 16) {\n  throw new Error(\"ERREUR: GCE_SHARED_IV est manquante ou n'a pas une longueur de 16 caractères.\");\n}\n// --- FIN BLOC DE DEBUG ---\n\nconst item = items[0].json;\nconst encryptedData = item.sec1;\n\n\n\nif (!encryptedData) {\n \n  item.decrypted_password = null;\n  return [item];\n}\n\ntry {\n  const decipher = crypto.createDecipheriv(ALGORITHM, Buffer.from(SECRET_KEY), Buffer.from(IV));\n\n  let decrypted = decipher.update(encryptedData, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  \n  item.decrypted_password = decrypted;\n\n} catch (error) {\n\n  throw error;\n}\n\nreturn [item];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4960,112],"id":"c433aa4a-83bc-4277-9002-98f2368325b2","name":"get imap password"},{"parameters":{"operation":"get","databaseId":52,"tableId":705,"rowId":"={{ $('Get opportunité').first().json.T1_user[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4528,112],"id":"ea853041-ac6f-48d6-a424-2abdc45bcbc8","name":"Get a row1","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"jsCode":"const nodemailer = require('nodemailer');\nconst imaps = require('imap-simple');\n// On importe la bonne fonction depuis le module, comme corrigé précédemment\nconst { createMimeMessage } = require('mail-mime-builder');\n\n// --- RÉCUPÉRATION DES DONNÉES ENTRANTES ---\nconst item = $input.first();\n// ===================================================================\n//  EMAIL TEMPLATE (Basé sur le Look & Feel du PDF)\n// ===================================================================\nconst emailTemplate = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>__SUJET_PLACEHOLDER__</title>\n    <style>\n        body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            font-size: 11pt;\n            color: #333;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f7f6;\n        }\n        .wrapper {\n            width: 100%;\n            background-color: #f4f7f6;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        .container {\n            max-width: 700px;\n            margin: auto;\n            background-color: #ffffff;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        .header {\n            padding: 25px 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-start;\n            background-color: #f8f8f8;\n            border-bottom: 1px solid #eee;\n        }\n        .company-info {\n            line-height: 1.4;\n            font-size: 9pt;\n            color: #555;\n        }\n        .company-name {\n            font-size: 20pt;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 8px;\n        }\n        .content {\n            padding: 30px;\n            line-height: 1.6;\n        }\n        .content a {\n            color: #2E75B5;\n            font-weight: bold;\n            text-decoration: none;\n        }\n        .content a:hover {\n            text-decoration: underline;\n        }\n        .footer {\n            padding: 20px 30px;\n            text-align: center;\n            font-size: 9pt;\n            color: #888;\n            background-color: #f8f8f8;\n            border-top: 1px solid #eee;\n        }\n        .footer a {\n            color: #2E75B5;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"header\">\n                <div>\n                    <div class=\"company-name\">Excellence Executive Company</div>\n                    <div class=\"company-info\">\n                        1016 Rue Melançon, Saint-Jérôme QC J7J6X7<br>\n                        +1 514 268-4393 | info@ee-cie.ca\n                    </div>\n                </div>\n            </div>\n            <div class=\"content\">\n                __BODY_PLACEHOLDER__\n            </div>\n            <div class=\"footer\">\n                <p>\n                    <a href=\"https://ee-cie.ca\">https://ee-cie.ca</a><br>\n                    NEQ: 742845506RT0001 | TVQ: 4012787052\n                </p>\n                <p>Cet e-mail est un message de service automatisé.</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// --- LOGIQUE PRINCIPALE ---\ntry {\n  \n  let jsonData = item.json;\n \n const destinataire =  $('Clean and Parse LLM Response').first().json.structuredData['email client'];\n  const sujet =  $('Clean and Parse LLM Response').first().json.structuredData.sujet;\n  const corpsGenereParLlm =  $('Clean and Parse LLM Response').first().json.structuredData['intro to client'] + '<br>' + $('Clean and Parse LLM Response').first().json.structuredData.data;\n  \n  \n\n\n// On ajoute le bouton au corps de l'e-mail\nconst corpsAvecBouton = corpsGenereParLlm  ;\n\n// On injecte le tout dans le template final\nlet finalHtml = emailTemplate.replace('__BODY_PLACEHOLDER__', corpsAvecBouton);\nfinalHtml = finalHtml.replace('__SUJET_PLACEHOLDER__', sujet);\n \n  const smtpUser = jsonData.Email;\n  const smtpPass = jsonData.decrypted_password;\n  const mailHost = \"eecie.ca\";\n\n  const mailOptions = {\n    from: `\"Excellence Executive Cie\" <${smtpUser}>`, // From Name amélioré\n    to: destinataire,\n    subject: sujet,\n    html: finalHtml,\n    \n  };\n  \n  \n  const authConfig = { smtpUser, smtpPass, mailHost };\n  let result;\n\n  \n    result = await sendAndSaveEmail(mailOptions, authConfig, 'Sent');\n\n  return [{ json: result }];\n  \n} catch (error) {\n  console.error(error);\n  throw error;\n}\n\n// --- FONCTIONS D'AIDE (Aucun changement ici, à conserver telles quelles) ---\n\nasync function sendAndSaveEmail(mailOptions, authConfig, sentMailboxName) {\n  const transporter = nodemailer.createTransport({\n    host: authConfig.mailHost, port: 587, secure: false,\n    auth: { user: authConfig.smtpUser, pass: authConfig.smtpPass },\n    tls: { rejectUnauthorized: false }\n  });\n\n  const info = await transporter.sendMail(mailOptions);\n  console.log(`Email envoyé avec succès à ${mailOptions.to}. MessageId: ${info.messageId}`);\n  \n  try {\n    await saveToMailbox(mailOptions, authConfig, sentMailboxName);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} et sauvegardé dans '${sentMailboxName}'`, messageId: info.messageId };\n  } catch (imapError) {\n    console.error(`L'email a été envoyé, mais la sauvegarde dans '${sentMailboxName}' a échoué:`, imapError.message);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} mais échec de la sauvegarde.`, warning: imapError.message, messageId: info.messageId };\n  }\n}\n\nasync function saveToMailbox(mailOptions, authConfig, mailboxName) {\n  const msg = createMimeMessage();\n  msg.setSender(mailOptions.from);\n  msg.setTo(mailOptions.to);\n  msg.setSubject(mailOptions.subject);\n  \n  msg.addMessage({ contentType: 'text/html', data: mailOptions.html });\n  \n  if (mailOptions.attachments && mailOptions.attachments.length > 0) {\n    const attachment = mailOptions.attachments[0];\n    const attachmentBase64 = attachment.content.toString('base64');\n    msg.addAttachment({\n      filename: attachment.filename,\n      contentType: attachment.contentType,\n      data: attachmentBase64,\n      headers: { 'Content-Transfer-Encoding': 'base64' }\n    });\n  }\n  \n  const rawEmail = msg.asRaw();\n  const flags = mailboxName === 'Drafts' ? ['\\\\Draft', '\\\\Seen'] : ['\\\\Seen'];\n\n  const config = {\n    imap: {\n      user: authConfig.smtpUser, password: authConfig.smtpPass,\n      host: authConfig.mailHost, port: 993, tls: true,\n      tlsOptions: { rejectUnauthorized: false }\n    }\n  };\n\n  let connection;\n  try {\n    connection = await imaps.connect(config);\n    await connection.append(rawEmail, { mailbox: mailboxName, flags: flags });\n    connection.end();\n    return { success: true, message: `Email sauvegardé avec succès dans '${mailboxName}'` };\n  } catch (err) {\n    if (connection) connection.end();\n    throw new Error(`Erreur IMAP: Impossible de sauvegarder dans '${mailboxName}'. Détails: ${err.message}`);\n  }\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5280,32],"id":"f5a1a7f6-33f7-4a58-9cd0-6d45372c6ba1","name":"send imap client"},{"parameters":{"jsCode":"const nodemailer = require('nodemailer');\nconst imaps = require('imap-simple');\n// On importe la bonne fonction depuis le module, comme corrigé précédemment\nconst { createMimeMessage } = require('mail-mime-builder');\n\n// --- RÉCUPÉRATION DES DONNÉES ENTRANTES ---\nconst item = $input.first();\n// ===================================================================\n//  EMAIL TEMPLATE (Basé sur le Look & Feel du PDF)\n// ===================================================================\nconst emailTemplate = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>__SUJET_PLACEHOLDER__</title>\n    <style>\n        body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            font-size: 11pt;\n            color: #333;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f7f6;\n        }\n        .wrapper {\n            width: 100%;\n            background-color: #f4f7f6;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        .container {\n            max-width: 700px;\n            margin: auto;\n            background-color: #ffffff;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        .header {\n            padding: 25px 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-start;\n            background-color: #f8f8f8;\n            border-bottom: 1px solid #eee;\n        }\n        .company-info {\n            line-height: 1.4;\n            font-size: 9pt;\n            color: #555;\n        }\n        .company-name {\n            font-size: 20pt;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 8px;\n        }\n        .content {\n            padding: 30px;\n            line-height: 1.6;\n        }\n        .content a {\n            color: #2E75B5;\n            font-weight: bold;\n            text-decoration: none;\n        }\n        .content a:hover {\n            text-decoration: underline;\n        }\n        .footer {\n            padding: 20px 30px;\n            text-align: center;\n            font-size: 9pt;\n            color: #888;\n            background-color: #f8f8f8;\n            border-top: 1px solid #eee;\n        }\n        .footer a {\n            color: #2E75B5;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <div class=\"header\">\n                <div>\n                    <div class=\"company-name\">Excellence Executive Company</div>\n                    <div class=\"company-info\">\n                        1016 Rue Melançon, Saint-Jérôme QC J7J6X7<br>\n                        +1 514 268-4393 | info@ee-cie.ca\n                    </div>\n                </div>\n            </div>\n            <div class=\"content\">\n                __BODY_PLACEHOLDER__\n            </div>\n            <div class=\"footer\">\n                <p>\n                    <a href=\"https://ee-cie.ca\">https://ee-cie.ca</a><br>\n                    NEQ: 742845506RT0001 | TVQ: 4012787052\n                </p>\n                <p>Cet e-mail est un message de service automatisé.</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// --- LOGIQUE PRINCIPALE ---\ntry {\n  \n  let jsonData = item.json;\n \n const destinataire =  $('Clean and Parse LLM Response').first().json.structuredData['email prestataire'];\n  const sujet =  $('Clean and Parse LLM Response').first().json.structuredData.sujet;\n  const corpsGenereParLlm =  $('Clean and Parse LLM Response').first().json.structuredData['intro to prestataire'] + '<br>' + $('Clean and Parse LLM Response').first().json.structuredData.data +'<br>';\n  \n  \n  const devisId = $('Get devis').first().json.id;\n\n// On ajoute le bouton au corps de l'e-mail\nconst corpsAvecBouton = corpsGenereParLlm  ;\n\n// On injecte le tout dans le template final\nlet finalHtml = emailTemplate.replace('__BODY_PLACEHOLDER__', corpsAvecBouton);\nfinalHtml = finalHtml.replace('__SUJET_PLACEHOLDER__', sujet);\n \n  const smtpUser = jsonData.Email;\n  const smtpPass = jsonData.decrypted_password;\n  const mailHost = \"eecie.ca\";\n\n  const mailOptions = {\n    from: `\"Excellence Executive Cie\" <${smtpUser}>`, // From Name amélioré\n    to: destinataire,\n    subject: sujet,\n    html: finalHtml,\n    \n  };\n  \n  \n  const authConfig = { smtpUser, smtpPass, mailHost };\n  let result;\n\n  \n    result = await sendAndSaveEmail(mailOptions, authConfig, 'Sent');\n\n  return [{ json: result }];\n  \n} catch (error) {\n  console.error(error);\n  throw error;\n}\n\n// --- FONCTIONS D'AIDE (Aucun changement ici, à conserver telles quelles) ---\n\nasync function sendAndSaveEmail(mailOptions, authConfig, sentMailboxName) {\n  const transporter = nodemailer.createTransport({\n    host: authConfig.mailHost, port: 587, secure: false,\n    auth: { user: authConfig.smtpUser, pass: authConfig.smtpPass },\n    tls: { rejectUnauthorized: false }\n  });\n\n  const info = await transporter.sendMail(mailOptions);\n  console.log(`Email envoyé avec succès à ${mailOptions.to}. MessageId: ${info.messageId}`);\n  \n  try {\n    await saveToMailbox(mailOptions, authConfig, sentMailboxName);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} et sauvegardé dans '${sentMailboxName}'`, messageId: info.messageId };\n  } catch (imapError) {\n    console.error(`L'email a été envoyé, mais la sauvegarde dans '${sentMailboxName}' a échoué:`, imapError.message);\n    return { success: true, message: `Mail envoyé à ${mailOptions.to} mais échec de la sauvegarde.`, warning: imapError.message, messageId: info.messageId };\n  }\n}\n\nasync function saveToMailbox(mailOptions, authConfig, mailboxName) {\n  const msg = createMimeMessage();\n  msg.setSender(mailOptions.from);\n  msg.setTo(mailOptions.to);\n  msg.setSubject(mailOptions.subject);\n  \n  msg.addMessage({ contentType: 'text/html', data: mailOptions.html });\n  \n  if (mailOptions.attachments && mailOptions.attachments.length > 0) {\n    const attachment = mailOptions.attachments[0];\n    const attachmentBase64 = attachment.content.toString('base64');\n    msg.addAttachment({\n      filename: attachment.filename,\n      contentType: attachment.contentType,\n      data: attachmentBase64,\n      headers: { 'Content-Transfer-Encoding': 'base64' }\n    });\n  }\n  \n  const rawEmail = msg.asRaw();\n  const flags = mailboxName === 'Drafts' ? ['\\\\Draft', '\\\\Seen'] : ['\\\\Seen'];\n\n  const config = {\n    imap: {\n      user: authConfig.smtpUser, password: authConfig.smtpPass,\n      host: authConfig.mailHost, port: 993, tls: true,\n      tlsOptions: { rejectUnauthorized: false }\n    }\n  };\n\n  let connection;\n  try {\n    connection = await imaps.connect(config);\n    await connection.append(rawEmail, { mailbox: mailboxName, flags: flags });\n    connection.end();\n    return { success: true, message: `Email sauvegardé avec succès dans '${mailboxName}'` };\n  } catch (err) {\n    if (connection) connection.end();\n    throw new Error(`Erreur IMAP: Impossible de sauvegarder dans '${mailboxName}'. Détails: ${err.message}`);\n  }\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5280,240],"id":"e2ec335b-44f8-437b-a9ba-e7dc4438bb2a","name":"send imap prestataire"},{"parameters":{"operation":"create","databaseId":52,"tableId":711,"fieldsUi":{"fieldValues":[{"fieldId":6863,"fieldValue":"Email"},{"fieldId":6864,"fieldValue":"={{ $now }}"},{"fieldId":6865,"fieldValue":"=Confirmation RDV\n{{ $now.toString() }}\nMessage Partenaire envoyé\n{{ $json.message }}\n{{ $json.messageId }}"},{"fieldId":6866,"fieldValue":"Autres"},{"fieldId":6882,"fieldValue":"={{ $('Get opportunité').first().json.id }}"},{"fieldId":6880,"fieldValue":"={{ $('Get fournisseur contact').first().json.id }}"},{"fieldId":6908,"fieldValue":"={{ $('Get opportunité').first().json.Appels[0].id }}"},{"fieldId":6914,"fieldValue":"=True"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5488,240],"id":"b445ba1f-7002-45a1-99c4-b1bf0b199b82","name":"interaction partenaire","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"create","databaseId":52,"tableId":711,"fieldsUi":{"fieldValues":[{"fieldId":6863,"fieldValue":"Email"},{"fieldId":6864,"fieldValue":"={{ $now }}"},{"fieldId":6865,"fieldValue":"={{ $now.toString() }}\n{{ $json.message }}\n{{ $json.messageId }}"},{"fieldId":6866,"fieldValue":"Autres"},{"fieldId":6882,"fieldValue":"={{ $('Get opportunité').first().json.id }}"},{"fieldId":6880,"fieldValue":"={{ $('Get opportunité contact').first().json.id }}"},{"fieldId":6908,"fieldValue":"={{ $('Get opportunité').first().json.Appels[0].id }}"},{"fieldId":6914,"fieldValue":"=True"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5472,32],"id":"d4244118-e6a3-4d1e-82bb-91bf28573acd","name":"interaction client","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"create","databaseId":52,"tableId":802,"fieldsUi":{"fieldValues":[{"fieldId":7684,"fieldValue":"={{ $('Get opportunité').first().json.id }}"},{"fieldId":7685,"fieldValue":"={{ $('Webhook').first().json.body.items[0].Date_Heure_RDV }}"},{"fieldId":7902,"fieldValue":"={{ $('Get fournisseur').first().json.id }}"},{"fieldId":7687,"fieldValue":"Planifiée"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2896,-112],"id":"43f8a61b-1535-49e2-8776-a8692edde734","name":"create intervention","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"create","databaseId":52,"tableId":711,"fieldsUi":{"fieldValues":[{"fieldId":6863,"fieldValue":"Autres"},{"fieldId":6864,"fieldValue":"={{ $now }}"},{"fieldId":6865,"fieldValue":"=Confirmation Job planifier\nopportunité liée : {{ $json.Opportunite_Liee[0].id }} / {{ $json.Opportunite_Liee[0].value }}\nIntervention : {{ $json.id }} / {{ $json.Date_Prev_Intervention }}\nStatus : {{ $json.Statut_Intervention.value }}\nPrestataire : {{ $json.Fournisseur[0].id }} / {{ $json.Fournisseur[0].value }}\n\n"},{"fieldId":6866,"fieldValue":"Autres"},{"fieldId":6882,"fieldValue":"={{ $('Get opportunité').first().json.id }}"},{"fieldId":6880,"fieldValue":"={{ $('Get opportunité contact').first().json.id }}"},{"fieldId":6908,"fieldValue":"={{ $('Get opportunité').first().json.Appels[0].id }}"},{"fieldId":6914,"fieldValue":"=True"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3104,-112],"id":"cca4fc90-47ef-42e1-acc2-51fd61b7f388","name":"interaction jobs confirmé","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Get opportunité').first().json.Type_Opportunite.value }}","rightValue":"Ponctuelle","operator":{"type":"string","operation":"equals"},"id":"0bafc78d-fbb2-47d2-86d3-edc39a51aa70"}],"combinator":"and"},"renameOutput":true,"outputKey":"Ponctuelle"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"852b3e98-6c73-424b-8b46-81819d49edf3","leftValue":"={{ $('Get opportunité').first().json.Type_Opportunite.value }}","rightValue":"Récurrente","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Récurrente"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.3,"position":[2528,80],"id":"2ebb0411-e427-46c3-b7bf-dae2a291e40c","name":"Switch"},{"parameters":{"operation":"update","databaseId":52,"tableId":703,"rowId":"={{ $('Get opportunité').first().json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6828,"fieldValue":"Livraison"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2688,-112],"id":"1222b273-ed1f-4c20-bd52-789679d2a322","name":"Update opp status","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":52,"tableId":703,"rowId":"={{ $('Get opportunité').first().json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6828,"fieldValue":"Livraison"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2704,224],"id":"1b3128df-260e-4785-80d7-f16b1a457797","name":"Update opp status2","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"jsCode":"// This code requires luxon. Make sure it's enabled in your instance settings.\nconst luxon = require('luxon');\n\n// Get the full opportunity object from the first step\nconst opp = $('Get opportunité').first().json;\nconst rawDateFromWebhook = $('Webhook').first().json.body.items[0].Date_Heure_RDV;\n// --- NOUVEAU : Récupérer les interventions existantes ---\nconst existingInterventions = $items('Get Existing Interventions').map(item => item.json.Date_Prev_Intervention);// On crée un Set de dates existantes (au format YYYY-MM-DD) pour une recherche ultra-rapide\nconst existingDatesSet = new Set(existingInterventions.map(dateStr => luxon.DateTime.fromISO(dateStr).toISODate()));\n// --- FIN DU NOUVEAU BLOC ---\n// --- CORRECTION MAJEURE POUR LE FUSEAU HORAIRE ---\n// 1. On interprète la date comme étant UTC (car elle finit par Z).\n// 2. On la convertit immédiatement dans le fuseau horaire de Montréal.\nconst firstDate = luxon.DateTime.fromISO(rawDateFromWebhook, { setZone: true });\n// --- FIN DE LA CORRECTION ---\n\nconst datesToCreate = [];\n\nconst threeMonthsFromStart = firstDate.plus({ months: 3 });\nlet contractEndDate = opp.Date_Fin_Recurrence ? luxon.DateTime.fromISO(opp.Date_Fin_Recurrence) : null;\n\n// On s'assure que la date de fin de contrat est aussi dans le bon fuseau horaire pour la comparaison\nif (contractEndDate) {\n  contractEndDate = contractEndDate.setZone('America/Montreal');\n}\n\nlet effectiveEndDate = threeMonthsFromStart;\nif (contractEndDate && contractEndDate < threeMonthsFromStart) {\n  effectiveEndDate = contractEndDate;\n}\n\nlet currentDate = firstDate;\nconst intervalValue = opp.Intervalle;\n\nconst unitMap = {\n  'jours': 'days',\n  'semaines': 'weeks',\n  'mois': 'months',\n  'années': 'years'\n};\n\nconst baserowUnit = opp.Frequence.value.toLowerCase();\nconst luxonUnit = unitMap[baserowUnit];\n\nif (!luxonUnit) {\n  throw new Error(`Unité de fréquence non reconnue : \"${baserowUnit}\".`);\n}\n\n// Boucle de génération avec la vérification anti-doublon\nwhile (currentDate <= effectiveEndDate) {\n  // --- MODIFICATION : On vérifie avant d'ajouter ---\n  // On compare les dates au format YYYY-MM-DD pour ignorer les petites différences d'heure\n  const currentDateAsISODate = currentDate.toISODate();\n  \n  if (!existingDatesSet.has(currentDateAsISODate)) {\n    // Si la date n'existe pas déjà, on l'ajoute à la liste de création\n    datesToCreate.push({ json: { date: currentDate.toISO({ keepOffset: true }) } });\n    \n    // On l'ajoute aussi à notre Set pour éviter de la recréer dans la même exécution\n    existingDatesSet.add(currentDateAsISODate); \n  }else \n{\n  console.log(currentDateAsISODate)\n}\n  // --- FIN DE LA MODIFICATION ---\n  currentDate = currentDate.plus({ [luxonUnit]: intervalValue });\n}\n\nreturn datesToCreate;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2912,224],"id":"3e82114a-accc-4fa7-a456-cc51fb5b0fce","name":"Code in JavaScript","alwaysOutputData":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[3120,224],"id":"c31a403c-0dc2-4fd6-b88b-f3aea298562a","name":"Loop Over Items","onError":"continueRegularOutput"},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me","typeVersion":1,"position":[3984,272],"id":"e02354ff-9b73-4ee7-af26-34db5a155ac0"},{"parameters":{"operation":"create","databaseId":52,"tableId":802,"fieldsUi":{"fieldValues":[{"fieldId":7684,"fieldValue":"={{ $('Update opp status2').item.json.id }}"},{"fieldId":7685,"fieldValue":"={{ $json.date.toDateTime() }}"},{"fieldId":7687,"fieldValue":"Planifiée"},{"fieldId":7902,"fieldValue":"={{ $('Get fournisseur contact').first().json.Fournisseur[0].id }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3360,288],"id":"1322f677-4990-4e32-8c80-12fcc0c2ac3b","name":"Créer Interventions Récurrentes","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}},"onError":"continueRegularOutput"},{"parameters":{"operation":"get","databaseId":52,"tableId":705,"rowId":"={{ $('Get opportunité').first().json.T1_user[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1472,80],"id":"7ef5b4b1-41a0-4529-9ee4-896a95b3baff","name":"Get T1_user for Calendar","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}},{"parameters":{"jsCode":"const crypto = require('crypto');\n\n// Vos clés secrètes stockées dans les variables d'environnement de n8n\nconst SECRET_KEY = $env['GCE_SHARED_SECRET_KEY'];\nconst IV = $env['GCE_SHARED_IV'];\nconst ALGORITHM = 'aes-256-cbc';\n\n// Récupérer les données du noeud précédent\nconst item = items[0];\n\n// Récupérer le mot de passe chiffré du champ 'ncsec'\nconst encryptedData = item.json.ncsec;\n\nif (!encryptedData) {\n  item.json.decrypted_nc_password = null;\n  return item;\n}\n\ntry {\n  const decipher = crypto.createDecipheriv(ALGORITHM, Buffer.from(SECRET_KEY), Buffer.from(IV));\n  let decrypted = decipher.update(encryptedData, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  // On stocke le mot de passe déchiffré dans un nouveau champ\n  item.json.decrypted_nc_password = decrypted;\n\n} catch (error) {\n  console.error(\"Le déchiffrement du mot de passe Nextcloud a échoué.\", error);\n  throw error;\n}\n\nreturn item;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1680,80],"id":"79487b02-f50e-40dd-b5f9-9d866dffd8b9","name":"Decrypt Nextcloud Password"},{"parameters":{"jsCode":"const axios = require('axios');\nconst luxon = require('luxon');\n\n// --- 1. Récupération des données des noeuds précédents ---\n\n// Données de l'utilisateur (email, mot de passe décrypté)\nconst t1User = $('Get T1_user for Calendar').first().json;\nconst decryptedPassword = $('Decrypt Nextcloud Password').first().json.decrypted_nc_password; \n\n// L'intervention qui vient d'être créée (soit ponctuelle, soit une des récurrentes)\n// On utilise .first() car ce noeud s'exécutera une fois par intervention.\nconst intervention = $('Créer Interventions Récurrentes').first().json;\nconst opportunite = $('Get opportunité').first().json;\nconst fournisseur = $('Get fournisseur').first().json;\n\n// --- 2. Construction de la requête CalDAV ---\n\nconst username = t1User.Name;\nconst calendarName = 'calendrier-interventions';\nconst eventId = `eecie-job-${intervention.id}-${Date.now()}.ics`;\nconst url = `https://nextcloud.eecie.ca/remote.php/dav/calendars/${username}/${calendarName}/${eventId}`;\n\n// --- LA CORRECTION DÉFINITIVE EST ICI ---\nconst rawDateFromWebhook = intervention.Date_Prev_Intervention;\n\n// 1. On enlève le 'Z' de la fin pour rendre la date \"naive\"\nconst naiveDateString = rawDateFromWebhook.slice(0, -1); \n\n// 2. On parse cette date naive en lui assignant DIRECTEMENT le fuseau horaire de Montréal.\nconst startDate = luxon.DateTime.fromISO(naiveDateString, { zone: 'America/Montreal' }, {keepLocalTime: true });\n// --- FIN DE LA CORRECTION ---\n\nconst endDate = startDate.plus({ hours: 1 });\n\nconst dtstartFormatted = startDate.toFormat(\"yyyyMMdd'T'HHmmss\");\nconst dtendFormatted = endDate.toFormat(\"yyyyMMdd'T'HHmmss\");\n\nconst icsBody = `\nBEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//n8n//NONSGML EECIE CRM//EN\nBEGIN:VEVENT\nUID:${eventId}\nDTSTAMP:${luxon.DateTime.now().toUTC().toFormat(\"yyyyMMdd'T'HHmmss'Z'\")}\nDTSTART;TZID=America/Montreal:${dtstartFormatted}\nDTEND;TZID=America/Montreal:${dtendFormatted}\nSUMMARY:Intervention EECIE - ${opportunite.NomClient}\nDESCRIPTION:Tâches : ${opportunite.Travaux}\\\\nClient : ${opportunite.Contacts[0].value}\\\\nVille : ${opportunite.Ville}\\\\nPrestataire : ${fournisseur.Nom}\nEND:VEVENT\nEND:VCALENDAR\n`.trim();\n\n// --- 3. Authentification et En-têtes (inchangé) ---\nconst authString = `${username}:${decryptedPassword}`;\nconst encodedAuth = Buffer.from(authString).toString('base64');\nconst headers = {\n  'Content-Type': 'text/calendar; charset=utf-8',\n  'Authorization': `Basic ${encodedAuth}`\n};\n\n// --- 4. Exécution de la requête (inchangé) ---\ntry {\n  const response = await axios({\n    method: 'put',\n    url: url,\n    headers: headers,\n    data: icsBody\n  });\n  return { json: { success: true, status: response.status, eventId: eventId } };\n} catch (error) {\n  console.error(\"Erreur Nextcloud:\", error.response ? error.response.data : error.message);\n  return { json: { success: false, error: error.message } };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3616,304],"id":"ca4ccec8-e53b-495f-805c-aae417041998","name":"Send to Nextcloud CalDAV","onError":"continueRegularOutput"},{"parameters":{"jsCode":"const axios = require('axios');\nconst luxon = require('luxon');\n\n// --- 1. Récupération des données des noeuds précédents ---\n\n// Données de l'utilisateur (email, mot de passe décrypté)\nconst t1User = $('Get T1_user for Calendar').first().json;\nconst decryptedPassword = $('Decrypt Nextcloud Password').first().json.decrypted_nc_password; \n\n// L'intervention qui vient d'être créée (soit ponctuelle, soit une des récurrentes)\n// On utilise .first() car ce noeud s'exécutera une fois par intervention.\nconst intervention = $('Create intervention').first().json;\nconst opportunite = $('Get opportunité').first().json;\nconst fournisseur = $('Get fournisseur').first().json;\n\n// --- 2. Construction de la requête CalDAV ---\n\nconst username = t1User.Name;\nconst calendarName = 'calendrier-interventions';\nconst eventId = `eecie-job-${intervention.id}-${Date.now()}.ics`;\nconst url = `https://nextcloud.eecie.ca/remote.php/dav/calendars/${username}/${calendarName}/${eventId}`;\n\n// --- LA CORRECTION DÉFINITIVE EST ICI ---\nconst rawDateFromWebhook = intervention.Date_Prev_Intervention;\n\n// 1. On enlève le 'Z' de la fin pour rendre la date \"naive\"\nconst naiveDateString = rawDateFromWebhook.slice(0, -1); \n\n// 2. On parse cette date naive en lui assignant DIRECTEMENT le fuseau horaire de Montréal.\nconst startDate = luxon.DateTime.fromISO(naiveDateString, { zone: 'America/Montreal' }, {keepLocalTime: true });\n// --- FIN DE LA CORRECTION ---\n\nconst endDate = startDate.plus({ hours: 1 });\n\nconst dtstartFormatted = startDate.toFormat(\"yyyyMMdd'T'HHmmss\");\nconst dtendFormatted = endDate.toFormat(\"yyyyMMdd'T'HHmmss\");\n\nconst icsBody = `\nBEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//n8n//NONSGML EECIE CRM//EN\nBEGIN:VEVENT\nUID:${eventId}\nDTSTAMP:${luxon.DateTime.now().toUTC().toFormat(\"yyyyMMdd'T'HHmmss'Z'\")}\nDTSTART;TZID=America/Montreal:${dtstartFormatted}\nDTEND;TZID=America/Montreal:${dtendFormatted}\nSUMMARY:Intervention EECIE - ${opportunite.NomClient}\nDESCRIPTION:Tâches : ${opportunite.Travaux}\\\\nClient : ${opportunite.Contacts[0].value}\\\\nVille : ${opportunite.Ville}\\\\nPrestataire : ${fournisseur.Nom}\nEND:VEVENT\nEND:VCALENDAR\n`.trim();\n\n// --- 3. Authentification et En-têtes (inchangé) ---\nconst authString = `${username}:${decryptedPassword}`;\nconst encodedAuth = Buffer.from(authString).toString('base64');\nconst headers = {\n  'Content-Type': 'text/calendar; charset=utf-8',\n  'Authorization': `Basic ${encodedAuth}`\n};\n\n// --- 4. Exécution de la requête (inchangé) ---\ntry {\n  const response = await axios({\n    method: 'put',\n    url: url,\n    headers: headers,\n    data: icsBody\n  });\n  return { json: { success: true, status: response.status, eventId: eventId } };\n} catch (error) {\n  console.error(\"Erreur Nextcloud:\", error.response ? error.response.data : error.message);\n  return { json: { success: false, error: error.message } };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3360,-96],"id":"a502b85d-adb1-4300-9a98-ef6cb1f82079","name":"Send to Nextcloud CalDAV1"},{"parameters":{"databaseId":52,"tableId":802,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":7684,"operator":"link_row_has","value":"={{ $('Get opportunité').first().json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1888,80],"id":"b454ec10-de45-4466-a507-299eaf643c5d","name":"Get Existing Interventions","credentials":{"baserowApi":{"id":"SAkHE4LXFLDlBctH","name":"Baserow account"}}}],"connections":{"Webhook":{"main":[[{"node":"Get opportunité","type":"main","index":0},{"node":"Get fournisseur","type":"main","index":0}]]},"Get fournisseur":{"main":[[{"node":"Get fournisseur contact","type":"main","index":0}]]},"Get opportunité":{"main":[[{"node":"Get opportunité contact","type":"main","index":0},{"node":"Get devis","type":"main","index":0}]]},"Get devis":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Get opportunité contact":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Get fournisseur contact":{"main":[[{"node":"Merge","type":"main","index":2}]]},"Basic LLM Chain":{"main":[[{"node":"Clean and Parse LLM Response","type":"main","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Clean and Parse LLM Response":{"main":[[{"node":"Get T1_user for Calendar","type":"main","index":0}]]},"get imap password":{"main":[[{"node":"send imap client","type":"main","index":0},{"node":"send imap prestataire","type":"main","index":0}]]},"Get a row1":{"main":[[{"node":"get imap password","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"send imap prestataire":{"main":[[{"node":"interaction partenaire","type":"main","index":0}]]},"send imap client":{"main":[[{"node":"interaction client","type":"main","index":0}]]},"create intervention":{"main":[[{"node":"interaction jobs confirmé","type":"main","index":0}]]},"interaction jobs confirmé":{"main":[[{"node":"Send to Nextcloud CalDAV1","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Update opp status","type":"main","index":0}],[{"node":"Update opp status2","type":"main","index":0}]]},"Update opp status":{"main":[[{"node":"create intervention","type":"main","index":0}]]},"Update opp status2":{"main":[[{"node":"Code in JavaScript","type":"main","index":0}]]},"Code in JavaScript":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Get a row1","type":"main","index":0}],[{"node":"Créer Interventions Récurrentes","type":"main","index":0}]]},"Replace Me":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Créer Interventions Récurrentes":{"main":[[{"node":"Send to Nextcloud CalDAV","type":"main","index":0}]]},"Get T1_user for Calendar":{"main":[[{"node":"Decrypt Nextcloud Password","type":"main","index":0}]]},"Decrypt Nextcloud Password":{"main":[[{"node":"Get Existing Interventions","type":"main","index":0}]]},"Send to Nextcloud CalDAV":{"main":[[{"node":"Replace Me","type":"main","index":0}]]},"Send to Nextcloud CalDAV1":{"main":[[{"node":"Get a row1","type":"main","index":0}]]},"Get Existing Interventions":{"main":[[{"node":"Switch","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook":[{"json":{"headers":{"host":"n8n.eecie.ca","user-agent":"python-requests/2.32.3","accept-encoding":"gzip, deflate, br","accept":"*/*","content-type":"application/json","x-baserow-event":"rows.updated","x-baserow-delivery":"0c528b0c-6b76-4a16-aa74-38dee7554e31","origin":"https://n8n.eecie.ca","x-forwarded-proto":"https","x-forwarded-for":"172.18.0.2","x-forwarded-host":"n8n.eecie.ca","x-forwarded-server":"n8n.eecie.ca","content-length":"1086","connection":"Keep-Alive"},"params":{},"query":{},"body":{"table_id":755,"database_id":52,"workspace_id":40,"webhook_id":10,"event_id":"0c528b0c-6b76-4a16-aa74-38dee7554e31","event_type":"rows.updated","items":[{"id":87,"order":"78.00000000000000000000","ID_rdv":87,"Opportunite_liee":[{"id":332,"value":"Timothée de Almeida","order":"167.00000000000000000000"}],"Fournisseur_concerne":[{"id":16,"value":"timothee Casqueira","order":"6.00000000000000000000"}],"Date_Heure_RDV":"2025-10-20T10:30:00Z","Validation_Token":"07a19f4fac78ac404e4eb02644eabfea27208288ecd6f3c5fc4a0f96083b84d5","Date de création":"2025-10-06T10:12:34.146072Z"}],"old_items":[{"id":87,"order":"78.00000000000000000000","ID_rdv":87,"Opportunite_liee":[{"id":332,"value":"Timothée de Almeida","order":"167.00000000000000000000"}],"Fournisseur_concerne":[{"id":16,"value":"timothee Casqueira","order":"6.00000000000000000000"}],"Date_Heure_RDV":null,"Validation_Token":"07a19f4fac78ac404e4eb02644eabfea27208288ecd6f3c5fc4a0f96083b84d5","Date de création":"2025-10-06T10:12:34.146072Z"}]},"webhookUrl":"https://n8n.eecie.ca/webhook/a2479dd8-262e-4f04-9860-fce45ef6da78","executionMode":"production"}}]},"versionId":"59f468d7-df88-45e0-b395-f67d4fdc922f","triggerCount":1,"shared":[{"createdAt":"2025-08-08T21:23:49.603Z","updatedAt":"2025-08-08T21:23:49.603Z","role":"workflow:owner","workflowId":"JllNakXAwk27dUcR","projectId":"t78m7QTVO4mkjY0H"}],"tags":[]}